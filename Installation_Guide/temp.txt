A "Type 3 hypervisor" is a term sometimes used to describe a hypothetical hypervisor layer that sits between the physical hardware (where "Type 1" hypervisors reside) and the host operating system (where "Type 2" hypervisors run), essentially acting as an intermediary layer between the two primary types; ho

A "Type 3" hypervisor, means it lives in a layer between the physical hardware (where "Type 1" hypervisors like ESX Server, Hyper-V and Xen live) and the operating system (which houses "Type 2" hypervisors like VMware Server, Microsoft Virtual Server and PC virtualization products like VMware Fusion, Parallels for M



== compile xen with optee support

To enable OP-TEE support:

Navigate to the Xen source directory.
Run the make menuconfig command to access Xen’s configuration menu.
Find the OPTEE option under the appropriate category (probably under something related to ARM or virtualization features).
Enable the OPTEE option and ensure that the TEE option is also enabled.
Save and exit the menuconfig tool.
Once you enable it, Xen will compile with OP-TEE support.



===xen
Xen offers two types of virtualization: paravirtualization and full virtualization.

In paravirtualization, the virtualized operating system operates on a tweaked version of the OS. As a result, the tweaked operating system becomes aware that it is virtualized. This permits more efficient interaction between the OS and the physical hardware since the hardware devices are addressed directly. However, the fact that the functionality of paravirtualization relies on modified guest OS is a downside since most vendors don’t provide it.

Xen also offers full virtualization, a mode where all virtualization extensions require the CPU’s support. Here, the unmodified operating systems can efficiently instruct the hardware because of this support. Full virtualization often comes with performance drawbacks because complete emulation usually requires more processing resources and overhead resources from the hypervisor.

Xen functions well on x86, x86_64, Itanium, and ARM frameworks. Furthermore, Xen can operate Linux, Windows, Solaris, and some Berkeley Software Distributions(BSDs) as guests on their supported CPU frameworks. Moreover, Xen is used by several companies, mainly by Citrix. But it is also adopted by Oracle for Oracle VM and by others.


===Role of a hypervisor
We can’t allow VMs to call OP-TEE directly. There are multiple
consideration concerning both virtualization mechanism and
security:
I VM does not know physical addresses of own buffers
I OP-TEE needs to know when VM is created or destroyed
I OP-TEE needs to know which VM calls it
I We need to ensure that VM does not try to provide OP-TEE
with memory reference to another VM’s memory

==== Hypervisor Intermediate Physical Addresses
We all know the idea of virtual memory: Memory Management
Unit (MMU) translates virtual memory addresses to real physical
ones:
VA PA
MMU
In most cases, when virtualization is used, we add a second stage
of MMU translation and new type of address: Intermediate
Physical Address (IPA):
VA IPA
MMU 1st stage
PA
MMU 2nd stage
Virtual machines manages translation tables for the first stage and
believes that it is working with real physical memory. But in reality
it lives in virtual address space. Hypervisor manages second stage
translation which translates IPAs to PAs.
This approach allows hypervisor to manage address spaces of VMs
in the same way as OS manages address spaces for processes


=== Role of hypervisor
So, virtual machine sees only IPA and don’t know real address of
it’s memory pages. On other hand, OP-TEE know nothing about
IPAs and always expects real physical addresses to be passed from
Normal World.
This is where hypervisor steps is. It traps all calls from VMs to
OP-TEE and translates IPAs to PAs in all requests. In the
meantime it also ensures that all memory pages in question belong
to the VM. (Also, ensures that those memory pages will stay in
memory for the whole duration).
VM
Hypervisor: translate addresses, add VMID
SMC (trapped) or HVC
OP-TEE


OP-TEE need to track life cycle of VMs. So it provides two special
calls:
I OPTEE_SMC_VM_CREATED(VMID)
I OPTEE_SMC_VM_DESTROYED(VMID)
Hypervisor informs OP-TEE about VM creation or destruction by
issuing above SMCs


=== xtest
benchmark_1001 TEE Trusted Storage Performance Test (WRITE)
-----------------+---------------+----------------
Data Size (B)    | Time (s)      | Speed (kB/s)
-----------------+---------------+----------------
256              |    0.040      |    6.250
512              |    0.055      |    9.091
1024             |    0.055      |   18.182
2048             |    0.100      |   20.000
4096             |    0.243      |   16.461
16384            |    1.086      |   14.733
524288           |   46.275       |   11.064
1048576          |   95.700      |   10.700
-----------------+---------------+----------------
benchmark_1001 OK

* benchmark_1002 TEE Trusted Storage Performance Test (READ)
-----------------+---------------+----------------
Data Size (B)    | Time (s)      | Speed (kB/s)
-----------------+---------------+----------------
256              |    0.001      |  250.000
512              |    0.001      |  500.000
1024             |    0.001      | 1000.000
2048             |    0.003      |  666.667
4096             |    0.008      |  500.000
16384            |    0.033      |  484.848
524288           |    1.027       |  498.539
1048576          |    2.035      |  503.194
-----------------+---------------+----------------
benchmark_1002 OK

* benchmark_1003 TEE Trusted Storage Performance Test (REWRITE)
-----------------+---------------+----------------
Data Size (B)    | Time (s)      | Speed (kB/s)
-----------------+---------------+----------------
256              |    0.042      |    5.952
512              |    0.042      |   11.905
1024             |    0.043      |   23.256
2048             |    0.286      |    6.993
4096             |    0.212      |   18.868
16384            |    0.991      |   16.145
524288           |   49.030      |   10.443
1048576          |  102.586      |    9.982
-----------------+---------------+----------------
benchmark_1003 OK

* benchmark_2001 TEE SHA Performance test (TA_SHA_SHA1)
min=262us max=588.333us mean=274.617us stddev=29.5489us (cv 10.76%) (3.55608MiB/s)
benchmark_2001 OK

* benchmark_2002 TEE SHA Performance test (TA_SHA_SHA226)
min=411.333us max=763.667us mean=430.237us stddev=36.6874us (cv 8.52726%) (9.07931MiB/s)
benchmark_2002 OK

* benchmark_2011 TEE AES Performance test (TA_AES_ECB)
min=319us max=638.334us mean=332.388us stddev=30.8239us (cv 9.27346%) (2.93802MiB/s)
benchmark_2011 OK

* benchmark_2012 TEE AES Performance test (TA_AES_CBC)
min=357us max=758us mean=373.566us stddev=34.0887us (cv 9.12523%) (2.61417MiB/s)
benchmark_2012 OK


Result of testsuite benchmark:
benchmark_1001 OK
benchmark_1002 OK
benchmark_1003 OK
benchmark_2001 OK
benchmark_2002 OK
benchmark_2011 OK
benchmark_2012 OK

24 subtests of which 0 failed
7 test cases of which 0 failed
0 test case was skipped
TEE test application done!

=== Demo 1

We will leverage an existing OPTEE example program ("helloworld"): modify its sources, rebuild the entire rootfs, and relaunch QEMU. Here's its code:
1. Change the CA (the normal world):
Make trivial changes to the app source: ./optee_examples/hello_world/host/main.c

Then rebuild helloworld (included in rootfs):
Check the output: ./out-br/target/usr/bin/optee_example_hello_world. Does the file have a recent timestamp?

Restart QEMU and invoke the CA from within QEMU, see if our modification is effective:

# (in the normal world console)
$ optee_example_hello_world
hello! ... Invoking TA to increment 42
TA incremented value to 43
2. Change the TA (the secure world)
Source location: ./optee_examples/hello_world/ta/hello_world_ta.c

Do some trivial changes:

@@ -108,7 +108,8 @@ static TEE_Result inc_value(uint32_t param_types,
                return TEE_ERROR_BAD_PARAMETERS;

        IMSG("Got value: %u from NW", params[0].value.a);
-       params[0].value.a++;
+       params[0].value.a+=2;
        IMSG("Increase value to: %u", params[0].value.a);
Build:

p3-buildroot
Check the build outcome:

# on dev machine
$ ls -lh out-br/target/lib/optee_armtz/8aaaf200-2450-11e4-abe2-0002a5d5c51b.ta
-r--r--r-- 1 xzl xzl 55K Jul 10 09:56 out-br/target/lib/optee_armtz/8aaaf200-2450-11e4-abe2-0002a5d5c51b.ta

$ md5sum out-br/target/lib/optee_armtz/8aaaf200-2450-11e4-abe2-0002a5d5c51b.ta
669e219e7381c842d80f3ba68db9368f  out-br/target/lib/optee_armtz/8aaaf200-2450-11e4-abe2-0002a5d5c51b.ta
Why the magical filename? This is because each TA is named after a unique UUID. In this example, it is defined in hello_world_ta.h. The build script will pick the UUID up and name the output binary after it


Restart QEMU, and check if the newly build TA is included into our rootfs:

# (In the normal world console): 
$ md5sum /lib/optee_armtz/8aaaf200-2450-11e4-abe2-0002a5d5c51b.ta
669e219e7381c842d80f3ba68db9368f
The md5sum (669e2...) matches what we saw above.

Now run helloworld again:

# (in the normal world console)
$ optee_example_hello_world
hello! ... Invoking TA to increment 42
TA incremented value to 44
The value is incremented by 2 -- our modification to TA works!







